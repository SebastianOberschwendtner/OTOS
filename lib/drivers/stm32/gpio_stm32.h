/**
 * OTOS - Open Tec Operating System
 * Copyright (c) 2021 Sebastian Oberschwendtner, sebastian.oberschwendtner@gmail.com
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

#ifndef GPIO_STM32_H_
#define GPIO_STM32_H_

// *** Includes ***
#include "vendors.h"

// *** Declarations ***
namespace GPIO {
    // *** Enums ***
    enum PinPort
    {
        PORTA = 0, PORTB, PORTC, PORTD, PORTE, PORTF,
        PORTG, PORTH, PORTI, PORTJ, PORTK 
    };
    enum PinNumber: unsigned char
    {
        PIN0 = 0, PIN1, PIN2, PIN3, PIN4, PIN5, PIN6, PIN7,
        PIN8, PIN9, PIN10, PIN11, PIN12, PIN13, PIN14, PIN15
    };
    enum Mode: unsigned char
    {
        INPUT = 0, OUTPUT, AF, ANALOG
    };
    enum Type: bool
    {
        PUSH_PULL = false, OPEN_DRAIN = true
    };
    enum Speed: unsigned char
    {
        LOW = 0, MEDIUM, HIGH, VERY_HIGH
    };
    enum Pull: unsigned char
    {
        NO_PP = 0, PULL_UP, PULL_DOWN
    };

    // *** Classes ***

    class PIN // : public GPIO_Interface 
    // => We do not use an abstract interface class with
    // virtual functions to save the overhead generated by that.
    // C++ uses v-tables to keep track of virtual functions, which
    // needs storage and precious cpu cycles.
    {
    private:
        volatile GPIO_TypeDef* thisPort;
        PinNumber thisPin;

    public:

        // Constructor
        PIN(const PinPort Port, const PinNumber Pin);
        PIN(const PinPort Port, const PinNumber Pin, const Mode PinMode);

        // Methods
        void setMode(const Mode NewMode);
        void setType(const Type NewType);
        void setSpeed(const Speed NewSpeed);
        void setPull(const Pull NewPull);
        void set(const bool NewState);
        void setHigh(void);
        void setLow(void);
        void toggle(void);
        bool get(void);
    };
};

#endif