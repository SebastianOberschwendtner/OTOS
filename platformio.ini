; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = native

[env]
platform = ststm32
platform_packages =
  toolchain-gccarmnoneeabi@>1.80000.0 ; use GCC ARM 7.0+
lib_ldf_mode = chain+
upload_protocol = stlink
upload_port = usb
upload_speed = 11500
check_tool = clangtidy
check_flags = clangtidy: --config-file=./.clang-tidy
check_skip_packages = yes
check_src_filters = +<src/*> +<include/*> +<lib/*>

[common]
build_flags = -std=c++17 -Wfatal-errors -fno-exceptions
lib_deps = 

[STM32]
framework = cmsis
build_flags = 

[env:STM32F429]
framework = ${STM32.framework}
lib_deps = ${common.lib_deps}
build_flags = ${common.build_flags} ${STM32.build_flags}
	-DF_APB1=30000000UL
	-DF_APB2=60000000UL
board = disco_f429zi
board_build.f_cpu = 120000000UL ; Maximum clock speed with PLL

[env:STM32F405]
framework = ${STM32.framework}
lib_deps = ${common.lib_deps}
build_flags = ${common.build_flags} ${STM32.build_flags}
	-DF_APB1=30000000UL
	-DF_APB2=60000000UL
board = genericSTM32F405RG
board_build.f_cpu = 120000000UL ; Maximum clock speed with PLL

[env:STM32L073]
framework = ${STM32.framework}
lib_deps = ${common.lib_deps}
build_flags = ${common.build_flags} ${STM32.build_flags}
	-DF_APB1=16000000UL
	-DF_APB2=16000000UL
board = nucleo_l073rz
board_build.f_cpu = 32000000UL ; Maximum clock speed with PLL

[env:STM32L053]
framework = ${STM32.framework}
lib_deps = ${common.lib_deps}
build_flags = ${common.build_flags} ${STM32.build_flags}
	-DF_APB1=16000000UL
	-DF_APB2=16000000UL
board = nucleo_l053r8
board_build.f_cpu = 32000000UL ; Maximum clock speed with PLL

; Testing environment for the default, speed optimized implementations
[env:native]
platform = native
lib_ldf_mode = deep+ ; Only for unit testing to find the mocked headers
build_flags = ${common.build_flags}
lib_extra_dirs = mocking
lib_ignore = vendors processors
lib_deps = ${common.lib_deps}
test_ignore = templates

; Testing environment for the reduced memory usage implementations
[env:native-minsize]
platform = native
lib_ldf_mode = deep+ ; Only for unit testing to find the mocked headers
build_flags = ${common.build_flags} -DOTOS_REDUCE_MEMORY_USAGE
lib_extra_dirs = mocking
lib_ignore = vendors processors
lib_deps = ${common.lib_deps}
test_ignore = templates
